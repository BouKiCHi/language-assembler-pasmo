'scopeName': 'source.asm'
'name': 'Assembler'
'fileTypes': [
  'asm'
  'z80'
]
'patterns': [
  {
    'include': '#line_comments'
  }
  {
    'include': '#string'
  }
  {
    'include': '#asmkey'
  }
  {
    'include': '#hexpats'
  }
  {
    'include': '#numpats'
  }
  {
    'include': '#label'
  }
]
'repository':
  'string':
    'patterns': [
      {
        'begin': '\''
        'end': '\''
        'name': 'string.quoted.single.asm'
      }
      {
        'begin': '\"'
        'end': '\"'
        'name': 'string.quoted.double.asm'
      }
    ]
  'line_comments':
     'begin': ';'
     'end': '\\n'
     'name': 'comment.line.asm'

  'asmkey':
    'patterns': [
      {
       'match': '\\s(?i:(equ|org|db|dw|dd|ds|include|incbin|end))\\s'
       'name': 'keyword.control.statement.asm'
      }
      {
       'match': '\\s(?i:(proc|macro|local|public|rept|endm|endp|exitm))\\s'
       'name': 'keyword.control.statement.asm'
      }
      {
       'match': '\\s(?i:(error|warning|shift|defb|defl|defm|defs|defw))\\s'
       'name': 'keyword.control.statement.asm'
      }
      {
       'match': '\\s(?i:(if|else|endif))\\s'
       'name': 'keyword.control.conditional.asm'
      }
    ]

  'label':
     'match': '^[\\s]*\\w+:'
     'name': 'entity.name.function.asm'

  'hexpats':
    'patterns':[
      {
        'match': '\\$[0-9a-fA-F]+'
        'name': 'constant.numeric.integer.hexadecimal.asm'
      }
      {
        'match': '\\b[0-9a-fA-F]+[hH]\\b'
        'name': 'constant.numeric.integer.hexadecimal.asm'
      }
     ]
  'numpats':
     'match': '\\b\\d+'
     'name': 'constant.numeric.integer.decimal.asm'
